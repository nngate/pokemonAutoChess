import Phaser, { GameObjects } from "phaser";
import type MoveTo from "phaser3-rex-plugins/plugins/moveto";
import { type AttackSprite, type Emotion, type IPokemon, type IPokemonEntity } from "../../../../types";
import { Ability } from "../../../../types/enum/Ability";
import { type AttackType, Orientation, PokemonActionState, type Rarity } from "../../../../types/enum/Game";
import type { Passive } from "../../../../types/enum/Passive";
import { Pkm } from "../../../../types/enum/Pokemon";
import type { Synergy } from "../../../../types/enum/Synergy";
import type { DebugScene } from "../scenes/debug-scene";
import type GameScene from "../scenes/game-scene";
import DraggableObject from "./draggable-object";
import ItemsContainer from "./items-container";
import Lifebar from "./life-bar";
import PokemonDetail from "./pokemon-detail";
import type { PokemonSpecialDetail } from "./pokemon-special-detail";
import PowerBar from "./power-bar";
export default class PokemonSprite extends DraggableObject {
    evolution: Pkm;
    rarity: Rarity;
    emotion: Emotion;
    shiny: boolean;
    index: string;
    id: string;
    hp: number;
    range: number;
    critChance: number;
    atk: number;
    def: number;
    speDef: number;
    attackType: AttackType;
    atkSpeed: number;
    targetX: number | null;
    targetY: number | null;
    skill: Ability;
    passive: Passive;
    positionX: number;
    positionY: number;
    attackSprite: AttackSprite;
    team: number | undefined;
    critPower: number;
    ap: number;
    life: number | undefined;
    shield: number | undefined;
    projectile: GameObjects.Sprite | undefined;
    itemsContainer: ItemsContainer;
    orientation: Orientation;
    action: PokemonActionState;
    moveManager: MoveTo;
    rangeType: string;
    types: Set<Synergy>;
    lifebar: Lifebar | undefined;
    detail: PokemonDetail | PokemonSpecialDetail | null;
    pp: number | undefined;
    maxPP: number;
    powerbar: PowerBar | undefined;
    sprite: GameObjects.Sprite;
    shadow: GameObjects.Sprite;
    wound: GameObjects.Sprite | undefined;
    burn: GameObjects.Sprite | undefined;
    sleep: GameObjects.Sprite | undefined;
    silence: GameObjects.Sprite | undefined;
    freeze: GameObjects.Sprite | undefined;
    confusion: GameObjects.Sprite | undefined;
    paralysis: GameObjects.Sprite | undefined;
    pokerus: GameObjects.Sprite | undefined;
    locked: GameObjects.Sprite | undefined;
    armorReduction: GameObjects.Sprite | undefined;
    charm: GameObjects.Sprite | undefined;
    flinch: GameObjects.Sprite | undefined;
    curse: GameObjects.Sprite | undefined;
    magmaStorm: GameObjects.Sprite | undefined;
    poison: GameObjects.Sprite | undefined;
    protect: GameObjects.Sprite | undefined;
    resurection: GameObjects.Sprite | undefined;
    runeProtect: GameObjects.Sprite | undefined;
    spikeArmor: GameObjects.Sprite | undefined;
    magicBounce: GameObjects.Sprite | undefined;
    electricField: GameObjects.Sprite | undefined;
    psychicField: GameObjects.Sprite | undefined;
    grassField: GameObjects.Sprite | undefined;
    fairyField: GameObjects.Sprite | undefined;
    curseVulnerability: GameObjects.Sprite | undefined;
    curseWeakness: GameObjects.Sprite | undefined;
    curseTorment: GameObjects.Sprite | undefined;
    curseFate: GameObjects.Sprite | undefined;
    light: GameObjects.Sprite | undefined;
    stars: number;
    playerId: string;
    shouldShowTooltip: boolean;
    flip: boolean;
    animationLocked: boolean;
    skydiving: boolean;
    constructor(scene: GameScene | DebugScene, x: number, y: number, pokemon: IPokemonEntity | IPokemon, playerId: string, inBattle: boolean, flip: boolean);
    get isOnBench(): boolean;
    updateTooltipPosition(): void;
    destroy(fromScene?: boolean | undefined): void;
    closeDetail(): void;
    openDetail(): void;
    onPointerDown(pointer: Phaser.Input.Pointer): void;
    onPointerUp(): void;
    onPointerOut(): void;
    onPointerOver(pointer: any): void;
    attackAnimation(targetX: number, targetY: number, delayBeforeShoot: number, travelTime: number): void;
    deathAnimation(): void;
    resurectAnimation(): void;
    displayAnimation(anim: string): void;
    fishingAnimation(): void;
    evolutionAnimation(): void;
    spawnAnimation(): void;
    hatchAnimation(): void;
    specialAttackAnimation(group: Phaser.GameObjects.Group, ultCount: number): void;
    setLifeBar(pokemon: IPokemonEntity, scene: Phaser.Scene): void;
    setPowerBar(pokemon: IPokemonEntity, scene: Phaser.Scene): void;
    addWound(): void;
    removeWound(): void;
    addBurn(): void;
    removeBurn(): void;
    addSleep(): void;
    removeSleep(): void;
    addSilence(): void;
    removeSilence(): void;
    addFreeze(): void;
    removeFreeze(): void;
    addConfusion(): void;
    removeConfusion(): void;
    addParalysis(): void;
    removeParalysis(): void;
    addPokerus(): void;
    removePokerus(): void;
    addLocked(): void;
    removeLocked(): void;
    addArmorReduction(): void;
    removeArmorReduction(): void;
    addCharm(): void;
    removeCharm(): void;
    addFlinch(): void;
    removeFlinch(): void;
    addCurse(): void;
    removeCurse(): void;
    addCurseVulnerability(): void;
    addCurseWeakness(): void;
    addCurseTorment(): void;
    addCurseFate(): void;
    addPoison(): void;
    removePoison(): void;
    addProtect(): void;
    removeProtect(): void;
    skydiveUp(): void;
    skydiveDown(): void;
    addResurection(): void;
    removeResurection(): void;
    addRuneProtect(): void;
    removeRuneProtect(): void;
    addSpikeArmor(): void;
    removeSpikeArmor(): void;
    addMagicBounce(): void;
    removeMagicBounce(): void;
    addLight(): void;
    addElectricField(): void;
    removeElectricField(): void;
    addGrassField(): void;
    removeGrassField(): void;
    addFairyField(): void;
    removeFairyField(): void;
    addPsychicField(): void;
    removePsychicField(): void;
    addRageEffect(): void;
}
export declare function addWanderingPokemon(scene: GameScene, pkm: Pkm, onClick: (pokemon: PokemonSprite, pointer: Phaser.Input.Pointer, tween: Phaser.Tweens.Tween) => void): void;
