import { Room } from "colyseus.js";
import { GameObjects, Scene } from "phaser";
import { DesignTiled } from "../../../../core/design";
import GameState from "../../../../rooms/states/game-state";
import { DungeonPMDO } from "../../../../types/enum/Dungeon";
import { GamePhaseState } from "../../../../types/enum/Game";
import AnimationManager from "../animation-manager";
import BattleManager from "../components/battle-manager";
import BoardManager from "../components/board-manager";
import ItemContainer from "../components/item-container";
import ItemsContainer from "../components/items-container";
import LoadingManager from "../components/loading-manager";
import MinigameManager from "../components/minigame-manager";
import PokemonSprite from "../components/pokemon";
import { SellZone } from "../components/sell-zone";
import UnownManager from "../components/unown-manager";
import WeatherManager from "../components/weather-manager";
export default class GameScene extends Scene {
    tilemaps: Map<DungeonPMDO, DesignTiled>;
    room: Room<GameState> | undefined;
    uid: string | undefined;
    map: Phaser.Tilemaps.Tilemap | undefined;
    battleGroup: GameObjects.Group | undefined;
    animationManager: AnimationManager | undefined;
    itemsContainer: ItemsContainer | undefined;
    board: BoardManager | undefined;
    battle: BattleManager | undefined;
    weatherManager: WeatherManager | undefined;
    unownManager?: UnownManager;
    music: Phaser.Sound.WebAudioSound | undefined;
    pokemonHovered: PokemonSprite | undefined;
    pokemonDragged: PokemonSprite | null;
    shopIndexHovered: number | null;
    itemDragged: ItemContainer | null;
    dropSpots: Phaser.GameObjects.Image[];
    sellZone: SellZone | undefined;
    zones: Phaser.GameObjects.Zone[];
    lastDragDropPokemon: PokemonSprite | undefined;
    lastPokemonDetail: PokemonSprite | null;
    minigameManager: MinigameManager | null;
    loadingManager: LoadingManager | null;
    started: boolean;
    spectate: boolean;
    constructor();
    init(data: {
        room: Room<GameState>;
        spectate: boolean;
    }): void;
    preload(): void;
    startGame(): void;
    update(time: number, delta: number): void;
    registerKeys(): void;
    refreshShop(): void;
    buyExperience(): void;
    sellPokemon(pokemon: PokemonSprite): void;
    removeFromShop(index: number): void;
    updatePhase(newPhase: GamePhaseState, previousPhase: GamePhaseState): void;
    preloadMaps(mapNames: DungeonPMDO[]): Promise<void[]>;
    setMap(mapName: DungeonPMDO): Promise<void>;
    resetDragState(): void;
    initializeDragAndDrop(): void;
}
