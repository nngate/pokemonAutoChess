import { ArraySchema, MapSchema, Schema } from "@colyseus/schema";
import type GameState from "../../rooms/states/game-state";
import type { IPlayer, Role, Title } from "../../types";
import { DungeonPMDO } from "../../types/enum/Dungeon";
import { BattleResult } from "../../types/enum/Game";
import { Item } from "../../types/enum/Item";
import { Pkm, type PkmProposition } from "../../types/enum/Pokemon";
import { Synergy } from "../../types/enum/Synergy";
import { Weather } from "../../types/enum/Weather";
import { Effects } from "../effects";
import type { IPokemonConfig } from "../mongo-models/user-metadata";
import ExperienceManager from "./experience-manager";
import HistoryItem from "./history-item";
import { Pokemon } from "./pokemon";
import Synergies from "./synergies";
export default class Player extends Schema implements IPlayer {
    id: string;
    simulationId: string;
    simulationTeamIndex: number;
    name: string;
    avatar: string;
    board: MapSchema<Pokemon, string>;
    shop: ArraySchema<Pkm>;
    experienceManager: ExperienceManager;
    synergies: Synergies;
    money: number;
    life: number;
    shopLocked: boolean;
    streak: number;
    interest: number;
    opponentId: string;
    opponentName: string;
    opponentAvatar: string;
    opponentTitle: string;
    spectatedPlayerId: string;
    boardSize: number;
    items: ArraySchema<Item>;
    rank: number;
    elo: number;
    alive: boolean;
    history: ArraySchema<HistoryItem>;
    pokemonCollection: any;
    title: Title | "";
    role: Role;
    itemsProposition: ArraySchema<Item>;
    pokemonsProposition: ArraySchema<PkmProposition>;
    pveRewards: ArraySchema<Item>;
    pveRewardsPropositions: ArraySchema<Item>;
    loadingProgress: number;
    berryTreesType: Item[];
    berryTreesStage: number[];
    map: DungeonPMDO;
    effects: Effects;
    regionalPokemons: ArraySchema<Pkm>;
    commonRegionalPool: Pkm[];
    uncommonRegionalPool: Pkm[];
    rareRegionalPool: Pkm[];
    epicRegionalPool: Pkm[];
    ultraRegionalPool: Pkm[];
    isBot: boolean;
    opponents: Map<string, number>;
    titles: Set<Title>;
    rerollCount: number;
    artificialItems: Item[];
    weatherRocks: Item[];
    randomComponentsGiven: Item[];
    randomEggsGiven: Pkm[];
    lightX: number;
    lightY: number;
    canRegainLife: boolean;
    wildChance: number;
    ghost: boolean;
    constructor(id: string, name: string, elo: number, avatar: string, isBot: boolean, rank: number, pokemonCollection: Map<string, IPokemonConfig>, title: Title | "", role: Role, state: GameState);
    addBattleResult(id: string, name: string, result: BattleResult, avatar: string, weather: Weather | undefined): void;
    getPokemonAt(x: number, y: number): Pokemon | undefined;
    transformPokemon(pokemon: Pokemon, newEntry: Pkm): Pokemon;
    updateSynergies(): void;
    updateArtificialItems(updatedSynergies: Map<Synergy, number>): boolean;
    updateWeatherRocks(updatedSynergies: Map<Synergy, number>): boolean;
    updateFishingRods(updatedSynergies: Map<Synergy, number>): void;
    updateRegionalPool(state: GameState): void;
    onLightChange(): void;
}
