import { Schema, SetSchema } from "@colyseus/schema";
import Count from "../models/colyseus-models/count";
import Player from "../models/colyseus-models/player";
import Status from "../models/colyseus-models/status";
import { AttackSprite, Emotion, IPokemon, IPokemonEntity } from "../types";
import { Ability } from "../types/enum/Ability";
import { Effect } from "../types/enum/Effect";
import { AttackType, Orientation, PokemonActionState, Rarity, Stat } from "../types/enum/Game";
import { Item } from "../types/enum/Item";
import { Passive } from "../types/enum/Passive";
import { Pkm } from "../types/enum/Pokemon";
import { SpecialGameRule } from "../types/enum/SpecialGameRule";
import { Synergy } from "../types/enum/Synergy";
import { Weather } from "../types/enum/Weather";
import Board from "./board";
import PokemonState from "./pokemon-state";
import Simulation from "./simulation";
import { SimulationCommand } from "./simulation-command";
export declare class PokemonEntity extends Schema implements IPokemonEntity {
    shiny: boolean;
    positionX: number;
    positionY: number;
    action: PokemonActionState;
    index: string;
    id: string;
    orientation: Orientation;
    hp: number;
    pp: number;
    maxPP: number;
    atk: number;
    def: number;
    speDef: number;
    attackType: AttackType;
    life: number;
    shield: number;
    team: number;
    range: number;
    atkSpeed: number;
    targetX: number;
    targetY: number;
    attackSprite: AttackSprite;
    rarity: Rarity;
    name: Pkm;
    effects: SetSchema<Effect>;
    items: SetSchema<Item>;
    types: SetSchema<Synergy>;
    stars: number;
    skill: Ability;
    passive: Passive;
    status: Status;
    count: Count;
    critChance: number;
    critPower: number;
    ap: number;
    healDone: number;
    emotion: Emotion;
    cooldown: number;
    oneSecondCooldown: number;
    state: PokemonState;
    simulation: Simulation;
    baseAtk: number;
    baseDef: number;
    baseSpeDef: number;
    baseRange: number;
    dodge: number;
    physicalDamage: number;
    specialDamage: number;
    trueDamage: number;
    physicalDamageReduced: number;
    specialDamageReduced: number;
    shieldDamageTaken: number;
    shieldDone: number;
    flyingProtection: number;
    growGroundTimer: number;
    grassHealCooldown: number;
    sandstormDamageTimer: number;
    fairySplashCooldown: number;
    echo: number;
    isClone: boolean;
    refToBoardPokemon: IPokemon;
    commands: SimulationCommand[];
    constructor(pokemon: IPokemon, positionX: number, positionY: number, team: number, simulation: Simulation);
    update(dt: number, board: Board, weather: Weather, player: Player | undefined): void;
    getAttackDelay(): number;
    get canMove(): boolean;
    get isTargettable(): boolean;
    get player(): Player | undefined;
    get inLightCell(): boolean;
    hasSynergyEffect(synergy: Synergy): boolean;
    handleDamage(params: {
        damage: number;
        board: Board;
        attackType: AttackType;
        attacker: PokemonEntity | null;
        shouldTargetGainMana: boolean;
    }): {
        death: boolean;
        takenDamage: number;
    };
    handleSpecialDamage(damage: number, board: Board, attackType: AttackType, attacker: PokemonEntity | null, crit: boolean, apBoost?: boolean): {
        death: boolean;
        takenDamage: number;
    };
    handleHeal(heal: number, caster: IPokemonEntity, apBoost: number, crit: boolean): void;
    addShield(shield: number, caster: IPokemonEntity, apBoost: number, crit: boolean): void;
    changeState(state: PokemonState): void;
    toMovingState(): void;
    toAttackingState(): void;
    toIdleState(): void;
    addPP(value: number, caster: IPokemonEntity, apBoost: number, crit: boolean): void;
    addCritChance(value: number, caster: IPokemonEntity, apBoost: number, crit: boolean): void;
    addCritPower(value: number, caster: IPokemonEntity, apBoost: number, crit: boolean): void;
    addMaxHP(value: number, caster: IPokemonEntity, apBoost: number, crit: boolean): void;
    addDodgeChance(value: number, caster: IPokemonEntity, apBoost: number, crit: boolean): void;
    addAbilityPower(value: number, caster: IPokemonEntity, apBoost: number, crit: boolean): void;
    addDefense(value: number, caster: IPokemonEntity, apBoost: number, crit: boolean): void;
    addSpecialDefense(value: number, caster: IPokemonEntity, apBoost: number, crit: boolean): void;
    addAttack(value: number, caster: IPokemonEntity, apBoost: number, crit: boolean): void;
    addAttackSpeed(value: number, caster: IPokemonEntity, apBoost: number, crit: boolean): void;
    addPsychicField(): void;
    removePsychicField(): void;
    addElectricField(): void;
    removeElectricField(): void;
    moveTo(x: number, y: number, board: Board): void;
    skydiveTo(x: number, y: number, board: Board): void;
    onAttack({ target, board, physicalDamage, specialDamage, trueDamage, totalDamage }: {
        target: PokemonEntity;
        board: Board;
        physicalDamage: number;
        specialDamage: number;
        trueDamage: number;
        totalDamage: number;
    }): void;
    onHit({ target, board, totalTakenDamage, physicalDamage, specialDamage, trueDamage }: {
        target: PokemonEntity;
        board: Board;
        totalTakenDamage: number;
        physicalDamage: number;
        specialDamage: number;
        trueDamage: number;
    }): void;
    onDamageDealt({ target, damage }: {
        target: PokemonEntity;
        damage: number;
    }): void;
    onDamageReceived({ attacker, damage, board }: {
        attacker: PokemonEntity | null;
        damage: number;
        board: Board;
    }): void;
    onCriticalAttack({ target, board, damage }: {
        target: PokemonEntity;
        board: Board;
        damage: number;
    }): void;
    onKill({ target, board }: {
        target: PokemonEntity;
        board: Board;
    }): void;
    onDeath({ board }: {
        board: Board;
    }): void;
    flyAway(board: Board): void;
    applyStat(stat: Stat, value: number): void;
    resurrect(): void;
    eatBerry(berry: Item, stealedFrom?: PokemonEntity): void;
}
export declare function getStrongestUnit(pokemons: PokemonEntity[]): PokemonEntity;
export declare function getUnitScore(pokemon: PokemonEntity | IPokemon): number;
export declare function canSell(pkm: Pkm, specialGameRule: SpecialGameRule | undefined | null): boolean;
export declare function getMoveSpeed(pokemon: IPokemonEntity, weather: Weather): number;
